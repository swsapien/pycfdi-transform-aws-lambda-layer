# Python package
# Create and test a Python package on multiple Python versions.
# Add steps that analyze code, save the dist with the build record, publish to a PyPI-compatible index, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/python
trigger:
  tags:
    include:
      - v*

pr: none

stages:
- stage: build
  jobs:
  - job: build
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - script: |    
        docker run -v "$PWD":/var/task "lambci/lambda:build-python3.7" /bin/sh -c "pip install -r requirements.txt -t python/lib/python3.7/site-packages/; exit"
        docker run -v "$PWD":/var/task "lambci/lambda:build-python3.8" /bin/sh -c "pip install -r requirements.txt -t python/lib/python3.8/site-packages/; exit"
      displayName: 'install requirements'
    - task: CopyFiles@2
      inputs:
        contents: 'python/**'
        targetFolder: $(Build.ArtifactStagingDirectory)
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'dist'
        publishLocation: 'Container'
    
- stage: deploy_github_release
  dependsOn: build
  jobs:
  - job: deploy_github_release
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: dist        
        downloadPath: $(Build.ArtifactStagingDirectory)
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/dist'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/pycfdi-transform-aws-lambda-layer-$(Build.SourceVersion).zip'
        replaceExistingArchive: true
    - task: GitHubRelease@1
      inputs:
        gitHubConnection: 'github.com_hermesjimenez'
        repositoryName: 'swsapien/pycfdi-transform-aws-lambda-layer'
        action: 'create'
        target: '$(Build.SourceVersion)'
        tagSource: 'gitTag'
        changeLogCompareToRelease: 'lastFullRelease'
        changeLogType: 'commitBased'
        assets: |
          $(Build.ArtifactStagingDirectory)/pycfdi-transform-aws-lambda-layer-$(Build.SourceVersion).zip

- stage: deploy_test_aws_layer_release
  dependsOn: build
  jobs:
  - job: deploy_test_aws_layer_release
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        artifactName: dist        
        downloadPath: $(Build.ArtifactStagingDirectory)
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(Build.ArtifactStagingDirectory)/dist'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/pycfdi-transform-aws-lambda-layer-$(Build.SourceVersion).zip'
        replaceExistingArchive: true
    
    - task: AWSCLI@1
      inputs:
        awsCredentials: 'sw_sapien_aws_test'
        regionName: 'us-east-1'
        awsCommand: 'lambda'
        awsSubCommand: 'publish-layer-version'
        awsArguments: '--layer-name pycfdi-transform-aws-lambda-layer --description "pycfdi-transform-aws-lambda-layer" --license-info "GNU" --zip-file fileb://$(Build.ArtifactStagingDirectory)/pycfdi-transform-aws-lambda-layer-$(Build.SourceVersion).zip --compatible-runtimes python3.7 python3.8'

    - task: AWSCLI@1
      inputs:
        awsCredentials: 'sw_sapien_aws_prod'
        regionName: 'us-east-1'
        awsCommand: 'lambda'
        awsSubCommand: 'publish-layer-version'
        awsArguments: '--layer-name pycfdi-transform-aws-lambda-layer --description "pycfdi-transform-aws-lambda-layer" --license-info "GNU" --zip-file fileb://$(Build.ArtifactStagingDirectory)/pycfdi-transform-aws-lambda-layer-$(Build.SourceVersion).zip --compatible-runtimes python3.7 python3.8'